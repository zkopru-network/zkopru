/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export type NewProof = ContractEventLog<{
  id: string
  root: string
  index: string
  0: string
  1: string
  2: string
}>
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string
  newOwner: string
  0: string
  1: string
}>
export type ProofUpdated = ContractEventLog<{
  id: string
  startRoot: string
  startIndex: string
  resultRoot: string
  resultIndex: string
  0: string
  1: string
  2: string
  3: string
  4: string
}>

export interface UtxoTreeValidator extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): UtxoTreeValidator
  clone(): UtxoTreeValidator
  methods: {
    CHALLENGE_PERIOD(): NonPayableTransactionObject<string>

    MAX_BLOCK_SIZE(): NonPayableTransactionObject<string>

    MAX_UTXO(): NonPayableTransactionObject<string>

    MAX_VALIDATION_GAS(): NonPayableTransactionObject<string>

    MAX_WITHDRAWAL(): NonPayableTransactionObject<string>

    MINIMUM_STAKE(): NonPayableTransactionObject<string>

    NULLIFIER_TREE_DEPTH(): NonPayableTransactionObject<string>

    REF_DEPTH(): NonPayableTransactionObject<string>

    UTXO_SUB_TREE_DEPTH(): NonPayableTransactionObject<string>

    UTXO_SUB_TREE_SIZE(): NonPayableTransactionObject<string>

    UTXO_TREE_DEPTH(): NonPayableTransactionObject<string>

    WITHDRAWAL_SUB_TREE_DEPTH(): NonPayableTransactionObject<string>

    WITHDRAWAL_SUB_TREE_SIZE(): NonPayableTransactionObject<string>

    WITHDRAWAL_TREE_DEPTH(): NonPayableTransactionObject<string>

    allowedMigrants(arg0: string): NonPayableTransactionObject<boolean>

    consensusProvider(): NonPayableTransactionObject<string>

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>

    proxied(arg0: string | number[]): NonPayableTransactionObject<string>

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>

    validators(arg0: string | number[]): NonPayableTransactionObject<string>

    newProof(
      startingRoot: number | string | BN,
      startingIndex: number | string | BN,
      initialSiblings: (number | string | BN)[],
    ): NonPayableTransactionObject<void>

    /**
     * Update the stored intermediate update result by appending given leaves.      Only the creator is allowed to append new leaves.
     */
    updateProof(
      proofId: number | string | BN,
      leaves: (number | string | BN)[],
    ): NonPayableTransactionObject<void>

    /**
     * Challenge when the submitted block's updated utxo tree index is invalid.
     * @param  // parentHeader Serialized details of its parent header
     * @param _deposits Submit all deposit leaves to be merged.
     */
    validateUTXOIndex(
      arg0: string | number[],
      arg1: string | number[],
      _deposits: (number | string | BN)[],
    ): NonPayableTransactionObject<{
      slash: boolean
      reason: string
      0: boolean
      1: string
    }>

    /**
     * Challenge when the submitted block's updated utxo tree root is invalid.
     * @param  // parentHeader Serialized details of its parent header
     * @param _deposits Submit all deposit leaves to be merged.
     * @param _subTreeSiblings Submit the siblings of the starting index leaf
     */
    validateUTXORoot(
      arg0: string | number[],
      arg1: string | number[],
      _deposits: (number | string | BN)[],
      _subTreeSiblings: (number | string | BN)[],
    ): NonPayableTransactionObject<{
      slash: boolean
      reason: string
      0: boolean
      1: string
    }>

    /**
     * Challenge when the submitted block's updated utxo tree root is invalid.
     * @param  // parentHeader Serialized details of its parent header
     * @param _deposits Submit all deposit leaves to be merged.
     */
    validateUTXORootWithProof(
      arg0: string | number[],
      arg1: string | number[],
      _deposits: (number | string | BN)[],
      proofId: number | string | BN,
    ): NonPayableTransactionObject<{
      slash: boolean
      reason: string
      0: boolean
      1: string
    }>

    getProof(
      proofId: number | string | BN,
    ): NonPayableTransactionObject<{
      owner: string
      startRoot: string
      startIndex: string
      resultRoot: string
      resultIndex: string
      mergedLeaves: string
      cachedSiblings: string[]
      0: string
      1: string
      2: string
      3: string
      4: string
      5: string
      6: string[]
    }>
  }
  events: {
    NewProof(cb?: Callback<NewProof>): EventEmitter
    NewProof(options?: EventOptions, cb?: Callback<NewProof>): EventEmitter

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>,
    ): EventEmitter

    ProofUpdated(cb?: Callback<ProofUpdated>): EventEmitter
    ProofUpdated(
      options?: EventOptions,
      cb?: Callback<ProofUpdated>,
    ): EventEmitter

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
  }

  once(event: 'NewProof', cb: Callback<NewProof>): void
  once(event: 'NewProof', options: EventOptions, cb: Callback<NewProof>): void

  once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
  once(
    event: 'OwnershipTransferred',
    options: EventOptions,
    cb: Callback<OwnershipTransferred>,
  ): void

  once(event: 'ProofUpdated', cb: Callback<ProofUpdated>): void
  once(
    event: 'ProofUpdated',
    options: EventOptions,
    cb: Callback<ProofUpdated>,
  ): void
}
